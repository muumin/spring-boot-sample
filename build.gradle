apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "groovy"
apply plugin: 'spring-boot'

defaultTasks "clean", "build"

project.ext {
    artifactId = 'spring-boot-sample'
    springBootVersion = '1.1.1.RELEASE'
    thymeleaVersion = '2.1.3.RELEASE'
    seleniumVersion = '2.44.0'
    gebVersion = "0.9.2"
    drivers = ["firefox", "chrome", "ie", "htmlunit"]
}

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile) each { it.groovyOptions.encoding = defaultEncoding }

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.1.1.RELEASE")
    }
}

repositories {
    jcenter()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    compile("org.thymeleaf:thymeleaf-spring4:$thymeleaVersion")
    compile "org.projectlombok:lombok:1.14.8"
    compile("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")

    testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
    testCompile("org.codehaus.groovy:groovy-all:2.2.2")
    testCompile('org.spockframework:spock-core:0.7-groovy-2.0')
    testCompile('cglib:cglib-nodep:3.1')
    testCompile('org.objenesis:objenesis:2.1')
    testCompile('com.github.groovy-wslite:groovy-wslite:0.8.0')
    testCompile "org.gebish:geb-core:$gebVersion"
    testCompile "org.gebish:geb-spock:$gebVersion"
    testRuntime "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    drivers.each { driver ->
        testCompile "org.seleniumhq.selenium:selenium-$driver-driver:$seleniumVersion"
    }

    testCompile('org.mockito:mockito-all:1.9.5')
    testCompile('net.arnx:jsonic:1.3.5')
}

task wrapper(type: Wrapper) { gradleVersion = '1.12' }

eclipse {
    pathVariables GRADLE_REPO: file(System.properties['user.home'] + '/.gradle/cache')
}

idea.project.ipr {
    withXml {xml ->
        def root = xml.node

        def component = root.appendNode('component', [name : 'GradleSettings'])
        def option = component.appendNode('option', [name : 'linkedExternalProjectsSettings'])
        def setting = option.appendNode('GradleProjectSettings')
        ['distributionType' : 'DEFAULT_WRAPPED',
                'externalProjectPath' : '$PROJECT_DIR$',
                'gradleHome' : '$USER_HOME$/.gvm/gradle/1.12'].each {name, value ->
            setting.appendNode('option', [name : name, value : value])
        }
        setting.appendNode('option', [name : 'modules'])
            .appendNode('set')
            .appendNode('option', [value : '$PROJECT_DIR$'])
    }
}
